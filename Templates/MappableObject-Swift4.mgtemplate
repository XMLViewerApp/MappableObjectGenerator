import Foundation

protocol {{ mapping.unqualifiedObjectClassName }}Type:{% if mapping.unqualifiedParentObjectClassName != nil %} {{ mapping.unqualifiedParentObjectClassName }}Type{% else %} CodableType{% /if %} {
    {% for fieldMapping in mapping.fieldMappings %}
    {% if fieldMapping.isStringEnumeration %}
    var {{ fieldMapping.fieldName }}: {{ fieldMapping.parentObjectMapping.unqualifiedObjectClassName }}.{{ fieldMapping.enumerationTypeName }}? { get set }
    {% else %}
    {% if fieldMapping.isCollection %}
    var {{ fieldMapping.fieldName }}: {{ fieldMapping.swiftFieldClassName }}<{{ fieldMapping.swiftFieldObjectClassName }}{% if fieldMapping.fieldObjectClassIsCustom %}Type{% /if %}>? { get set }
    {% else %}
    var {{ fieldMapping.fieldName }}: {{ fieldMapping.swiftFieldClassName }}{% if fieldMapping.fieldObjectClassIsCustom %}Type{% /if %}? { get set }
    {% /if %}
    {% /if %}
    {% /for %}
}

struct {{ mapping.unqualifiedObjectClassName }}: {{ mapping.unqualifiedObjectClassName }}Type {

    static let schemaID = "{{ mapping.mappingId }}"

    // MARK: Coding keys
    enum CodingKeys: String, CodingKey {
        {% for fieldMapping in mapping.allFieldMappings %}
        case {{ fieldMapping.fieldName }} = "{{ fieldMapping.mappingPath }}"
        {% /for %}
    }
    {% for fieldMapping in mapping.fieldMappings %}
    {% if fieldMapping.isStringEnumeration %}

    enum {{ fieldMapping.enumerationTypeName }}: String, Codable {
    {% for value in fieldMapping.enumeratedValues %}
    case {{ value }}
    {% /for %}
    }
    {% /if %}
    {% /for %}
    
    // MARK: properties
    {% for fieldMapping in mapping.allFieldMappings %}
    {% if fieldMapping.isStringEnumeration %}
    var {{ fieldMapping.fieldName }}: {{ fieldMapping.parentObjectMapping.unqualifiedObjectClassName }}.{{ fieldMapping.enumerationTypeName }}?
    {% else %}
    {% if fieldMapping.isCollection %}
    var {{ fieldMapping.fieldName }}: {{ fieldMapping.swiftFieldClassName }}<{{ fieldMapping.swiftFieldObjectClassName }}{% if fieldMapping.fieldObjectClassIsCustom %}Type{% /if %}>?{% if fieldMapping.fieldObjectClassIsCustom %} {
        willSet(newValue) {
            precondition(newValue == nil || newValue is {{ fieldMapping.swiftFieldClassName }}<{{ fieldMapping.swiftFieldObjectClassName }}>, "New value should be an instance of {{ fieldMapping.swiftFieldClassName }}<{{ fieldMapping.swiftFieldObjectClassName }}> but was: \(String(describing: newValue))")
        }
    }
    {% /if %}
    {% else %}
    var {{ fieldMapping.fieldName }}: {{ fieldMapping.swiftFieldClassName }}{% if fieldMapping.fieldObjectClassIsCustom %}Type{% /if %}?{% if fieldMapping.fieldObjectClassIsCustom %} {
        willSet(newValue) {
            precondition(newValue == nil || newValue is {{ fieldMapping.swiftFieldClassName }}, "New value should be an instance of {{ fieldMapping.swiftFieldClassName }} but was: \(String(describing: newValue))")
        }
    }
    {% /if %}
    {% /if %}
    {% /if %}
    {% /for %}

    // MARK: No argument initializer
    init() {

    }

    // MARK: Decodable implementation
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        {% for fieldMapping in mapping.allFieldMappings %}
        {% if fieldMapping.isStringEnumeration %}
        {{ fieldMapping.fieldName }} = try container.decodeIfPresent({{ fieldMapping.parentObjectMapping.unqualifiedObjectClassName }}.{{ fieldMapping.enumerationTypeName }}.self, forKey: .{{ fieldMapping.fieldName }})
        {% else %}
        {% if fieldMapping.isCollection %}
        {{ fieldMapping.fieldName }} = try container.decodeIfPresent({{ fieldMapping.swiftFieldClassName }}<{{ fieldMapping.swiftFieldObjectClassName }}>.self, forKey: .{{ fieldMapping.fieldName }})
        {% else %}
        {{ fieldMapping.fieldName }} = try container.decodeIfPresent({{ fieldMapping.swiftFieldClassName }}.self, forKey: .{{ fieldMapping.fieldName }})
        {% /if %}
        {% /if %}
        {% /for %}
    }

    // MARK: Encodable implementation
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        {% for fieldMapping in mapping.allFieldMappings %}
        {% if fieldMapping.isStringEnumeration %}
        try container.encodeIfPresent({{ fieldMapping.fieldName }}, forKey: .{{ fieldMapping.fieldName }})
        {% else %}
        {% if fieldMapping.isCollection %}
        try container.encodeIfPresent({{ fieldMapping.fieldName }}{% if fieldMapping.fieldObjectClassIsCustom %} as? {{ fieldMapping.swiftFieldClassName }}<{{ fieldMapping.swiftFieldObjectClassName }}>{% /if %}, forKey: .{{ fieldMapping.fieldName }})
        {% else %}
        try container.encodeIfPresent({{ fieldMapping.fieldName }}{% if fieldMapping.fieldObjectClassIsCustom %} as? {{ fieldMapping.swiftFieldClassName }}{% /if %}, forKey: .{{ fieldMapping.fieldName }})
        {% /if %}
        {% /if %}
        {% /for %}
    }

    // MARK: Validation
    func validate() -> ValidationResult {
        let validator = ObjectValidator(object: self)
        {% for fieldMapping in mapping.allFieldMappings %}
        {% if fieldMapping.hasConstraints %}
        validator.withKeyPath(\{{ mapping.unqualifiedObjectClassName }}.{{ fieldMapping.fieldName }}, name: "{{ fieldMapping.fieldName }}"{% if fieldMapping.isRequired %}, required: true{% /if %})?{% if fieldMapping.hasMinimum %}.validateMinimum({{ fieldMapping.minimum }}{% if fieldMapping.isExclusiveMinimum %}, exclusive: true{% /if %}){% /if %}{% if fieldMapping.hasMaximum %}.validateMaximum({{ fieldMapping.maximum }}{% if fieldMapping.isExclusiveMaximum %}, exclusive: true{% /if %}){% /if %}{% if fieldMapping.hasMultipleOf %}.validateMultipleOf({{ fieldMapping.multipleOf }}){% /if %}{% if fieldMapping.minItems > 0 %}.validateMinItems({{ fieldMapping.minItems }}){% /if %}{% if fieldMapping.maxItems >= 0 %}.validateMaxItems({{ fieldMapping.maxItems }}){% /if %}{% if fieldMapping.uniqueItems %}.validateUniqueItems(){% /if %}{% if fieldMapping.minLength > 0 %}.validateMinLength({{ fieldMapping.minLength }}){% /if %}{% if fieldMapping.maxLength >= 0 %}.validateMaxLength({{ fieldMapping.maxLength }}){% /if %}{% if fieldMapping.schemaFieldFormatType == 3 %}.validateEmailAddress(){% /if %}{% if fieldMapping.schemaFieldFormatType == 4 %}.validateHostName(){% /if %}{% if fieldMapping.schemaFieldFormatType == 5 %}.validateIPV4Address(){% /if %}{% if fieldMapping.schemaFieldFormatType == 6 %}.validateIPV6Address(){% /if %}{% if fieldMapping.pattern != nil %}.validatePattern("{{ fieldMapping.escapedPattern }}"){% /if %}
        {% else %}
        {% if fieldMapping.isRequired %}
        validator.withKeyPath(\{{ mapping.unqualifiedObjectClassName }}.{{ fieldMapping.fieldName }}, name: "{{ fieldMapping.fieldName }}", required: true)
        {% /if %}
        {% /if %}
        {% /for %}
        return validator.evaluate()
    }
}
